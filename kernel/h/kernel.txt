
kernel.bin:     file format elf32-i386


Disassembly of section .text:

00000120 <_start>:
     120:	bc 00 28 00 00       	mov    $0x2800,%esp
     125:	0f 01 05 04 2c 00 00 	sgdtl  0x2c04
     12c:	e8 4b 02 00 00       	call   37c <disp_str+0x7>
     131:	0f 01 15 04 2c 00 00 	lgdtl  0x2c04
     138:	0f 01 1d 0a 34 00 00 	lidtl  0x340a
     13f:	ea 66 01 00 00 08 00 	ljmp   $0x8,$0x166

00000146 <csinit>:
     146:	6a 00                	push   $0x0
     148:	9d                   	popf   
     149:	b4 0f                	mov    $0xf,%ah
     14b:	b0 4b                	mov    $0x4b,%al
     14d:	65 66 a3 8e 01 00 00 	mov    %ax,%gs:0x18e
     154:	fb                   	sti    
     155:	f4                   	hlt    

00000156 <divide_error>:
     156:	6a ff                	push   $0xffffffff
     158:	6a 00                	push   $0x0
     15a:	eb 4e                	jmp    1aa <exception>

0000015c <single_step_exception>:
     15c:	6a ff                	push   $0xffffffff
     15e:	6a 01                	push   $0x1
     160:	eb 48                	jmp    1aa <exception>

00000162 <nmi>:
     162:	6a ff                	push   $0xffffffff
     164:	6a 02                	push   $0x2
     166:	eb 42                	jmp    1aa <exception>

00000168 <breakpoint_exception>:
     168:	6a ff                	push   $0xffffffff
     16a:	6a 03                	push   $0x3
     16c:	eb 3c                	jmp    1aa <exception>

0000016e <overflow>:
     16e:	6a ff                	push   $0xffffffff
     170:	6a 04                	push   $0x4
     172:	eb 36                	jmp    1aa <exception>

00000174 <bounds_check>:
     174:	6a ff                	push   $0xffffffff
     176:	6a 05                	push   $0x5
     178:	eb 30                	jmp    1aa <exception>

0000017a <invalid_opcode>:
     17a:	6a ff                	push   $0xffffffff
     17c:	6a 06                	push   $0x6
     17e:	eb 2a                	jmp    1aa <exception>

00000180 <copr_not_available>:
     180:	6a ff                	push   $0xffffffff
     182:	6a 07                	push   $0x7
     184:	eb 24                	jmp    1aa <exception>

00000186 <double_fault>:
     186:	6a 08                	push   $0x8
     188:	eb 20                	jmp    1aa <exception>

0000018a <copr_seg_overrun>:
     18a:	6a ff                	push   $0xffffffff
     18c:	6a 09                	push   $0x9
     18e:	eb 1a                	jmp    1aa <exception>

00000190 <invalid_tss>:
     190:	6a 0a                	push   $0xa
     192:	eb 16                	jmp    1aa <exception>

00000194 <segment_not_present>:
     194:	6a 0b                	push   $0xb
     196:	eb 12                	jmp    1aa <exception>

00000198 <stack_exception>:
     198:	6a 0c                	push   $0xc
     19a:	eb 0e                	jmp    1aa <exception>

0000019c <general_protection>:
     19c:	6a 0d                	push   $0xd
     19e:	eb 0a                	jmp    1aa <exception>

000001a0 <page_fault>:
     1a0:	6a 0e                	push   $0xe
     1a2:	eb 06                	jmp    1aa <exception>

000001a4 <copr_error>:
     1a4:	6a ff                	push   $0xffffffff
     1a6:	6a 10                	push   $0x10
     1a8:	eb 00                	jmp    1aa <exception>

000001aa <exception>:
     1aa:	e8 9d 05 00 00       	call   74c <exception_handler+0xfc>
     1af:	83 c4 08             	add    $0x8,%esp
     1b2:	f4                   	hlt    

000001b3 <hwint_00>:
     1b3:	6a 00                	push   $0x0
     1b5:	e8 52 05 00 00       	call   70c <exception_handler+0xbc>
     1ba:	83 c4 04             	add    $0x4,%esp
     1bd:	f4                   	hlt    

000001be <hwint_01>:
     1be:	6a 01                	push   $0x1
     1c0:	e8 47 05 00 00       	call   70c <exception_handler+0xbc>
     1c5:	83 c4 04             	add    $0x4,%esp
     1c8:	f4                   	hlt    

000001c9 <hwint_02>:
     1c9:	6a 02                	push   $0x2
     1cb:	e8 3c 05 00 00       	call   70c <exception_handler+0xbc>
     1d0:	83 c4 04             	add    $0x4,%esp
     1d3:	f4                   	hlt    

000001d4 <hwint_03>:
     1d4:	6a 03                	push   $0x3
     1d6:	e8 31 05 00 00       	call   70c <exception_handler+0xbc>
     1db:	83 c4 04             	add    $0x4,%esp
     1de:	f4                   	hlt    

000001df <hwint_04>:
     1df:	6a 04                	push   $0x4
     1e1:	e8 26 05 00 00       	call   70c <exception_handler+0xbc>
     1e6:	83 c4 04             	add    $0x4,%esp
     1e9:	f4                   	hlt    

000001ea <hwint_05>:
     1ea:	6a 05                	push   $0x5
     1ec:	e8 1b 05 00 00       	call   70c <exception_handler+0xbc>
     1f1:	83 c4 04             	add    $0x4,%esp
     1f4:	f4                   	hlt    

000001f5 <hwint_06>:
     1f5:	6a 06                	push   $0x6
     1f7:	e8 10 05 00 00       	call   70c <exception_handler+0xbc>
     1fc:	83 c4 04             	add    $0x4,%esp
     1ff:	f4                   	hlt    

00000200 <hwint_07>:
     200:	6a 07                	push   $0x7
     202:	e8 05 05 00 00       	call   70c <exception_handler+0xbc>
     207:	83 c4 04             	add    $0x4,%esp
     20a:	f4                   	hlt    

0000020b <hwint_08>:
     20b:	6a 08                	push   $0x8
     20d:	e8 fa 04 00 00       	call   70c <exception_handler+0xbc>
     212:	83 c4 04             	add    $0x4,%esp
     215:	f4                   	hlt    

00000216 <hwint_09>:
     216:	6a 09                	push   $0x9
     218:	e8 ef 04 00 00       	call   70c <exception_handler+0xbc>
     21d:	83 c4 04             	add    $0x4,%esp
     220:	f4                   	hlt    

00000221 <hwint_10>:
     221:	6a 0a                	push   $0xa
     223:	e8 e4 04 00 00       	call   70c <exception_handler+0xbc>
     228:	83 c4 04             	add    $0x4,%esp
     22b:	f4                   	hlt    

0000022c <hwint_11>:
     22c:	6a 0b                	push   $0xb
     22e:	e8 d9 04 00 00       	call   70c <exception_handler+0xbc>
     233:	83 c4 04             	add    $0x4,%esp
     236:	f4                   	hlt    

00000237 <hwint_12>:
     237:	6a 0c                	push   $0xc
     239:	e8 ce 04 00 00       	call   70c <exception_handler+0xbc>
     23e:	83 c4 04             	add    $0x4,%esp
     241:	f4                   	hlt    

00000242 <hwint_13>:
     242:	6a 0d                	push   $0xd
     244:	e8 c3 04 00 00       	call   70c <exception_handler+0xbc>
     249:	83 c4 04             	add    $0x4,%esp
     24c:	f4                   	hlt    

0000024d <hwint_14>:
     24d:	6a 0e                	push   $0xe
     24f:	e8 b8 04 00 00       	call   70c <exception_handler+0xbc>
     254:	83 c4 04             	add    $0x4,%esp
     257:	f4                   	hlt    

00000258 <hwint_15>:
     258:	6a 0f                	push   $0xf
     25a:	e8 ad 04 00 00       	call   70c <exception_handler+0xbc>
     25f:	83 c4 04             	add    $0x4,%esp
     262:	f4                   	hlt    
	...

00000270 <init_disp_pos>:
#include <proto.h>
#include <global.h>


PUBLIC void init_disp_pos()
{
     270:	55                   	push   %ebp
     271:	89 e5                	mov    %esp,%ebp
	disp_pos = 0;
     273:	c7 05 00 28 00 00 00 	movl   $0x0,0x2800
     27a:	00 00 00 

     27d:	5d                   	pop    %ebp
     27e:	c3                   	ret    
	...

00000280 <cstart>:
#include <string.h>
#include <proto.h>
#include <global.h>

PUBLIC void cstart( )
{
     280:	55                   	push   %ebp
     281:	89 e5                	mov    %esp,%ebp
     283:	53                   	push   %ebx
     284:	57                   	push   %edi
     285:	56                   	push   %esi
     286:	83 ec 2c             	sub    $0x2c,%esp
     289:	8d 05 04 28 00 00    	lea    0x2804,%eax
	/* 把GDT从LAODER中拷贝到KERNEL */
	memcpy(gdt,
			(void *)(*(u32*)(&gdt_ptr[2])),
     28f:	8b 0d 06 2c 00 00    	mov    0x2c06,%ecx
		*((u16 *)(&gdt_ptr[0]))+1
     295:	0f b7 15 04 2c 00 00 	movzwl 0x2c04,%edx
     29c:	81 c2 01 00 00 00    	add    $0x1,%edx
#include <global.h>

PUBLIC void cstart( )
{
	/* 把GDT从LAODER中拷贝到KERNEL */
	memcpy(gdt,
     2a2:	89 04 24             	mov    %eax,(%esp)
     2a5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
     2a9:	89 54 24 08          	mov    %edx,0x8(%esp)
     2ad:	e8 aa 02 00 00       	call   55c <init_8259A+0xcc>
     2b2:	8d 0d 0a 2c 00 00    	lea    0x2c0a,%ecx
     2b8:	8d 15 0a 34 00 00    	lea    0x340a,%edx
     2be:	89 d6                	mov    %edx,%esi
     2c0:	81 c6 02 00 00 00    	add    $0x2,%esi
     2c6:	8d 3d 04 28 00 00    	lea    0x2804,%edi
     2cc:	8d 1d 04 2c 00 00    	lea    0x2c04,%ebx
     2d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
     2d5:	89 d8                	mov    %ebx,%eax
     2d7:	05 02 00 00 00       	add    $0x2,%eax
			(void *)(*(u32*)(&gdt_ptr[2])),
		*((u16 *)(&gdt_ptr[0]))+1
		);

	/* 设置新的GDTPTR，以便加载 */
	u16* p_gdt_limit = (u16* )(&gdt_ptr[0]);
     2dc:	89 5d f0             	mov    %ebx,-0x10(%ebp)
	u32* p_gdt_base = (u32* )(&gdt_ptr[2]);
     2df:	89 45 ec             	mov    %eax,-0x14(%ebp)
	*p_gdt_limit = GDT_SIZE * sizeof (DESCRIPTOR) - 1;
     2e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
     2e5:	66 c7 00 ff 03       	movw   $0x3ff,(%eax)
	*p_gdt_base = (u32)gdt;
     2ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
     2ed:	89 38                	mov    %edi,(%eax)
	//*p_gdt_base = *((u32* )(&gdt[0]));
	
	/* 设置新的IDTPTR，以便加载 */
	u16* p_idt_limit = (u16* )(&idt_ptr[0]);
     2ef:	89 55 e8             	mov    %edx,-0x18(%ebp)
	u32* p_idt_base = (u32* )(&idt_ptr[2]);
     2f2:	89 75 e4             	mov    %esi,-0x1c(%ebp)
	*p_idt_limit = IDT_SIZE * sizeof (GATE) - 1;
     2f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
     2f8:	66 c7 00 ff 07       	movw   $0x7ff,(%eax)
	*p_idt_base = (u32)idt;
     2fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
     300:	89 08                	mov    %ecx,(%eax)
	
	/* 显示字符串 */
	init_disp_pos();
     302:	e8 65 00 00 00       	call   36c <DispInt+0x3c>
     307:	8d 05 04 12 00 00    	lea    0x1204,%eax
	disp_str("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n------\"cstart\" begin------\n");
     30d:	89 04 24             	mov    %eax,(%esp)
     310:	e8 5c 01 00 00       	call   471 <memcpy.1+0x2>
	init_prot();
     315:	e8 b2 05 00 00       	call   8cc <init_prot+0xfc>
     31a:	8d 05 34 12 00 00    	lea    0x1234,%eax
	//disp_int(test);
	//disp_str("\n");
	disp_str("------\"cstart\" ends-------\n");
     320:	89 04 24             	mov    %eax,(%esp)
     323:	e8 49 01 00 00       	call   471 <memcpy.1+0x2>
	//	label: goto label;
}
     328:	83 c4 2c             	add    $0x2c,%esp
     32b:	5e                   	pop    %esi
     32c:	5f                   	pop    %edi
     32d:	5b                   	pop    %ebx
     32e:	5d                   	pop    %ebp
     32f:	c3                   	ret    

00000330 <DispInt>:
     330:	53                   	push   %ebx
     331:	8b 5c 24 08          	mov    0x8(%esp),%ebx
     335:	89 d8                	mov    %ebx,%eax
     337:	c1 e8 18             	shr    $0x18,%eax
     33a:	e8 75 00 00 00       	call   3b4 <DispAL>
     33f:	89 d8                	mov    %ebx,%eax
     341:	c1 e8 10             	shr    $0x10,%eax
     344:	e8 6b 00 00 00       	call   3b4 <DispAL>
     349:	89 d8                	mov    %ebx,%eax
     34b:	c1 e8 08             	shr    $0x8,%eax
     34e:	e8 61 00 00 00       	call   3b4 <DispAL>
     353:	89 d8                	mov    %ebx,%eax
     355:	e8 5a 00 00 00       	call   3b4 <DispAL>
     35a:	b4 07                	mov    $0x7,%ah
     35c:	b0 68                	mov    $0x68,%al
     35e:	57                   	push   %edi
     35f:	8b 3d 00 28 00 00    	mov    0x2800,%edi
     365:	65 66 89 07          	mov    %ax,%gs:(%edi)
     369:	83 c7 04             	add    $0x4,%edi
     36c:	89 3d 00 28 00 00    	mov    %edi,0x2800
     372:	5f                   	pop    %edi
     373:	5b                   	pop    %ebx
     374:	c3                   	ret    

00000375 <disp_str>:
     375:	55                   	push   %ebp
     376:	89 e5                	mov    %esp,%ebp
     378:	53                   	push   %ebx
     379:	56                   	push   %esi
     37a:	57                   	push   %edi
     37b:	b4 0f                	mov    $0xf,%ah
     37d:	8b 75 08             	mov    0x8(%ebp),%esi
     380:	8b 3d 00 28 00 00    	mov    0x2800,%edi

00000386 <disp_str.1>:
     386:	ac                   	lods   %ds:(%esi),%al
     387:	84 c0                	test   %al,%al
     389:	74 1e                	je     3a9 <disp_str.2>
     38b:	3c 0a                	cmp    $0xa,%al
     38d:	75 11                	jne    3a0 <disp_str.3>
     38f:	50                   	push   %eax
     390:	89 f8                	mov    %edi,%eax
     392:	b3 a0                	mov    $0xa0,%bl
     394:	f6 f3                	div    %bl
     396:	40                   	inc    %eax
     397:	b3 a0                	mov    $0xa0,%bl
     399:	f6 e3                	mul    %bl
     39b:	89 c7                	mov    %eax,%edi
     39d:	58                   	pop    %eax
     39e:	eb e6                	jmp    386 <disp_str.1>

000003a0 <disp_str.3>:
     3a0:	65 66 89 07          	mov    %ax,%gs:(%edi)
     3a4:	83 c7 02             	add    $0x2,%edi
     3a7:	eb dd                	jmp    386 <disp_str.1>

000003a9 <disp_str.2>:
     3a9:	89 3d 00 28 00 00    	mov    %edi,0x2800
     3af:	5f                   	pop    %edi
     3b0:	5e                   	pop    %esi
     3b1:	5b                   	pop    %ebx
     3b2:	5d                   	pop    %ebp
     3b3:	c3                   	ret    

000003b4 <DispAL>:
     3b4:	51                   	push   %ecx
     3b5:	52                   	push   %edx
     3b6:	57                   	push   %edi
     3b7:	8b 3d 00 28 00 00    	mov    0x2800,%edi
     3bd:	b4 0c                	mov    $0xc,%ah
     3bf:	88 c2                	mov    %al,%dl
     3c1:	c0 e8 04             	shr    $0x4,%al
     3c4:	b9 02 00 00 00       	mov    $0x2,%ecx

000003c9 <DispAL.begin>:
     3c9:	24 0f                	and    $0xf,%al
     3cb:	3c 09                	cmp    $0x9,%al
     3cd:	77 04                	ja     3d3 <DispAL.1>
     3cf:	04 30                	add    $0x30,%al
     3d1:	eb 04                	jmp    3d7 <DispAL.2>

000003d3 <DispAL.1>:
     3d3:	2c 0a                	sub    $0xa,%al
     3d5:	04 41                	add    $0x41,%al

000003d7 <DispAL.2>:
     3d7:	65 66 89 07          	mov    %ax,%gs:(%edi)
     3db:	83 c7 02             	add    $0x2,%edi
     3de:	88 d0                	mov    %dl,%al
     3e0:	e2 e7                	loop   3c9 <DispAL.begin>
     3e2:	89 3d 00 28 00 00    	mov    %edi,0x2800
     3e8:	5f                   	pop    %edi
     3e9:	5a                   	pop    %edx
     3ea:	59                   	pop    %ecx
     3eb:	c3                   	ret    

000003ec <DispReturn1>:
     3ec:	50                   	push   %eax
     3ed:	53                   	push   %ebx
     3ee:	89 f8                	mov    %edi,%eax
     3f0:	b3 a0                	mov    $0xa0,%bl
     3f2:	f6 f3                	div    %bl
     3f4:	25 ff 00 00 00       	and    $0xff,%eax
     3f9:	40                   	inc    %eax
     3fa:	b3 a0                	mov    $0xa0,%bl
     3fc:	f6 e3                	mul    %bl
     3fe:	89 c7                	mov    %eax,%edi
     400:	5b                   	pop    %ebx
     401:	58                   	pop    %eax
     402:	c3                   	ret    

00000403 <out_byte>:
     403:	8b 54 24 04          	mov    0x4(%esp),%edx
     407:	8a 44 24 08          	mov    0x8(%esp),%al
     40b:	ee                   	out    %al,(%dx)
     40c:	90                   	nop
     40d:	90                   	nop
     40e:	90                   	nop
     40f:	c3                   	ret    

00000410 <in_byte>:
     410:	8b 54 24 04          	mov    0x4(%esp),%edx
     414:	31 c0                	xor    %eax,%eax
     416:	ec                   	in     (%dx),%al
     417:	90                   	nop
     418:	90                   	nop
     419:	90                   	nop
     41a:	c3                   	ret    

0000041b <disp_color_str>:
     41b:	55                   	push   %ebp
     41c:	89 e5                	mov    %esp,%ebp
     41e:	53                   	push   %ebx
     41f:	56                   	push   %esi
     420:	57                   	push   %edi
     421:	8a 65 0c             	mov    0xc(%ebp),%ah
     424:	8b 75 08             	mov    0x8(%ebp),%esi
     427:	8b 3d 00 28 00 00    	mov    0x2800,%edi

0000042d <disp_color_str.1>:
     42d:	ac                   	lods   %ds:(%esi),%al
     42e:	84 c0                	test   %al,%al
     430:	74 1e                	je     450 <disp_color_str.2>
     432:	3c 0a                	cmp    $0xa,%al
     434:	75 11                	jne    447 <disp_color_str.3>
     436:	50                   	push   %eax
     437:	89 f8                	mov    %edi,%eax
     439:	b3 a0                	mov    $0xa0,%bl
     43b:	f6 f3                	div    %bl
     43d:	40                   	inc    %eax
     43e:	b3 a0                	mov    $0xa0,%bl
     440:	f6 e3                	mul    %bl
     442:	89 c7                	mov    %eax,%edi
     444:	58                   	pop    %eax
     445:	eb e6                	jmp    42d <disp_color_str.1>

00000447 <disp_color_str.3>:
     447:	65 66 89 07          	mov    %ax,%gs:(%edi)
     44b:	83 c7 02             	add    $0x2,%edi
     44e:	eb dd                	jmp    42d <disp_color_str.1>

00000450 <disp_color_str.2>:
     450:	89 3d 00 28 00 00    	mov    %edi,0x2800
     456:	5f                   	pop    %edi
     457:	5e                   	pop    %esi
     458:	5b                   	pop    %ebx
     459:	5d                   	pop    %ebp
     45a:	c3                   	ret    
     45b:	00 00                	add    %al,(%eax)
     45d:	00 00                	add    %al,(%eax)
	...

00000460 <memcpy>:
     460:	55                   	push   %ebp
     461:	89 e5                	mov    %esp,%ebp
     463:	56                   	push   %esi
     464:	57                   	push   %edi
     465:	51                   	push   %ecx
     466:	8b 7d 08             	mov    0x8(%ebp),%edi
     469:	8b 75 0c             	mov    0xc(%ebp),%esi
     46c:	8b 4d 10             	mov    0x10(%ebp),%ecx

0000046f <memcpy.1>:
     46f:	83 f9 00             	cmp    $0x0,%ecx
     472:	74 0b                	je     47f <memcpy.2>
     474:	3e 8a 06             	mov    %ds:(%esi),%al
     477:	26 88 07             	mov    %al,%es:(%edi)
     47a:	46                   	inc    %esi
     47b:	47                   	inc    %edi
     47c:	49                   	dec    %ecx
     47d:	eb f0                	jmp    46f <memcpy.1>

0000047f <memcpy.2>:
     47f:	8b 45 08             	mov    0x8(%ebp),%eax
     482:	59                   	pop    %ecx
     483:	5f                   	pop    %edi
     484:	5e                   	pop    %esi
     485:	5d                   	pop    %ebp
     486:	c3                   	ret    
	...

00000490 <init_8259A>:
#include <tinux.h>

PUBLIC void init_8259A()
{
     490:	55                   	push   %ebp
     491:	89 e5                	mov    %esp,%ebp
     493:	83 ec 58             	sub    $0x58,%esp
     496:	b8 20 00 00 00       	mov    $0x20,%eax
     49b:	b9 11 00 00 00       	mov    $0x11,%ecx
	//初始化，写入ICW1
	out_byte(INT_M_CTL, ICW1);
     4a0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
     4a7:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
     4ae:	00 
     4af:	89 45 fc             	mov    %eax,-0x4(%ebp)
     4b2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
     4b5:	e8 45 00 00 00       	call   4ff <init_8259A+0x6f>
     4ba:	b8 a0 00 00 00       	mov    $0xa0,%eax
     4bf:	b9 11 00 00 00       	mov    $0x11,%ecx
	out_byte(INT_S_CTL, ICW1);
     4c4:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
     4cb:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
     4d2:	00 
     4d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
     4d6:	89 4d f0             	mov    %ecx,-0x10(%ebp)
     4d9:	e8 21 00 00 00       	call   4ff <init_8259A+0x6f>
     4de:	b8 21 00 00 00       	mov    $0x21,%eax
     4e3:	b9 20 00 00 00       	mov    $0x20,%ecx
	
	//写入ICW2,制定各自第一个引脚对应的向量号
	out_byte(INT_M_CTLMASK, ICW2_M);
     4e8:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
     4ef:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
     4f6:	00 
     4f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
     4fa:	89 4d e8             	mov    %ecx,-0x18(%ebp)
     4fd:	e8 fd ff ff ff       	call   4ff <init_8259A+0x6f>
     502:	b8 a1 00 00 00       	mov    $0xa1,%eax
     507:	b9 28 00 00 00       	mov    $0x28,%ecx
	out_byte(INT_S_CTLMASK, ICW2_S);
     50c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
     513:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
     51a:	00 
     51b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     51e:	89 4d e0             	mov    %ecx,-0x20(%ebp)
     521:	e8 d9 ff ff ff       	call   4ff <init_8259A+0x6f>
     526:	b8 21 00 00 00       	mov    $0x21,%eax
     52b:	b9 04 00 00 00       	mov    $0x4,%ecx
	
	//ICW3指定级联的端口号
	out_byte(INT_M_CTLMASK, ICW3_M);
     530:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
     537:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
     53e:	00 
     53f:	89 45 dc             	mov    %eax,-0x24(%ebp)
     542:	89 4d d8             	mov    %ecx,-0x28(%ebp)
     545:	e8 b5 ff ff ff       	call   4ff <init_8259A+0x6f>
     54a:	b8 a1 00 00 00       	mov    $0xa1,%eax
     54f:	b9 02 00 00 00       	mov    $0x2,%ecx
	out_byte(INT_S_CTLMASK, ICW3_S);
     554:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
     55b:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
     562:	00 
     563:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     566:	89 4d d0             	mov    %ecx,-0x30(%ebp)
     569:	e8 91 ff ff ff       	call   4ff <init_8259A+0x6f>
     56e:	b8 21 00 00 00       	mov    $0x21,%eax
     573:	b9 01 00 00 00       	mov    $0x1,%ecx
	
	//ICW4指定80X86，正常EOI，Sequential模式
	out_byte(INT_M_CTLMASK, ICW4);
     578:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
     57f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
     586:	00 
     587:	89 45 cc             	mov    %eax,-0x34(%ebp)
     58a:	89 4d c8             	mov    %ecx,-0x38(%ebp)
     58d:	e8 6d ff ff ff       	call   4ff <init_8259A+0x6f>
     592:	b8 a1 00 00 00       	mov    $0xa1,%eax
     597:	b9 01 00 00 00       	mov    $0x1,%ecx
	out_byte(INT_S_CTLMASK, ICW4);
     59c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
     5a3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
     5aa:	00 
     5ab:	89 45 c4             	mov    %eax,-0x3c(%ebp)
     5ae:	89 4d c0             	mov    %ecx,-0x40(%ebp)
     5b1:	e8 49 ff ff ff       	call   4ff <init_8259A+0x6f>
     5b6:	b8 21 00 00 00       	mov    $0x21,%eax
     5bb:	b9 fd 00 00 00       	mov    $0xfd,%ecx

	//写入OCW1打开键盘中断
	out_byte(INT_M_CTLMASK, 0xFD);
     5c0:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
     5c7:	c7 44 24 04 fd 00 00 	movl   $0xfd,0x4(%esp)
     5ce:	00 
     5cf:	89 45 bc             	mov    %eax,-0x44(%ebp)
     5d2:	89 4d b8             	mov    %ecx,-0x48(%ebp)
     5d5:	e8 25 ff ff ff       	call   4ff <init_8259A+0x6f>
     5da:	b8 a1 00 00 00       	mov    $0xa1,%eax
     5df:	b9 ff 00 00 00       	mov    $0xff,%ecx
	out_byte(INT_S_CTLMASK, 0xFF);
     5e4:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
     5eb:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
     5f2:	00 
     5f3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
     5f6:	89 4d b0             	mov    %ecx,-0x50(%ebp)
     5f9:	e8 01 ff ff ff       	call   4ff <init_8259A+0x6f>
}
     5fe:	83 c4 58             	add    $0x58,%esp
     601:	5d                   	pop    %ebp
     602:	c3                   	ret    
     603:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
     60a:	84 00 00 00 00 00 

00000610 <spurious_irq>:

PUBLIC void spurious_irq(int irq)
{
     610:	55                   	push   %ebp
     611:	89 e5                	mov    %esp,%ebp
     613:	83 ec 08             	sub    $0x8,%esp
     616:	8b 45 08             	mov    0x8(%ebp),%eax
     619:	8d 0d 50 12 00 00    	lea    0x1250,%ecx
     61f:	89 45 fc             	mov    %eax,-0x4(%ebp)
	disp_str("spurious_irq: ");
     622:	89 0c 24             	mov    %ecx,(%esp)
     625:	e8 47 fe ff ff       	call   471 <memcpy.1+0x2>
	disp_int(irq);
     62a:	8b 45 fc             	mov    -0x4(%ebp),%eax
     62d:	89 04 24             	mov    %eax,(%esp)
     630:	e8 97 0c 00 00       	call   12cc <.L.str6+0x7>
     635:	8d 05 5f 12 00 00    	lea    0x125f,%eax
	disp_str("\n");
     63b:	89 04 24             	mov    %eax,(%esp)
     63e:	e8 2e fe ff ff       	call   471 <memcpy.1+0x2>
}
     643:	83 c4 08             	add    $0x8,%esp
     646:	5d                   	pop    %ebp
     647:	c3                   	ret    
	...

00000650 <exception_handler>:
void hwint_15();



PUBLIC void exception_handler(u32 vec_no, u32 err_code, u32 eip, u32 cs, u32 eflags)
{
     650:	55                   	push   %ebp
     651:	89 e5                	mov    %esp,%ebp
     653:	53                   	push   %ebx
     654:	57                   	push   %edi
     655:	56                   	push   %esi
     656:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
     65c:	8b 45 18             	mov    0x18(%ebp),%eax
     65f:	8b 4d 14             	mov    0x14(%ebp),%ecx
     662:	8b 55 10             	mov    0x10(%ebp),%edx
     665:	8b 75 0c             	mov    0xc(%ebp),%esi
     668:	8b 7d 08             	mov    0x8(%ebp),%edi
     66b:	8d 1d 84 14 00 00    	lea    0x1484,%ebx
     671:	89 45 84             	mov    %eax,-0x7c(%ebp)
     674:	b8 50 00 00 00       	mov    $0x50,%eax
     679:	89 45 80             	mov    %eax,-0x80(%ebp)
     67c:	8d 45 88             	lea    -0x78(%ebp),%eax
     67f:	89 7d f0             	mov    %edi,-0x10(%ebp)
     682:	89 75 ec             	mov    %esi,-0x14(%ebp)
     685:	89 55 e8             	mov    %edx,-0x18(%ebp)
     688:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
     68b:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
     68e:	89 4d e0             	mov    %ecx,-0x20(%ebp)
	int i;
	u8 text_color = 0x74;	/* 灰底红字 */
     691:	c6 45 db 74          	movb   $0x74,-0x25(%ebp)
	char* err_msg[] = 
     695:	89 04 24             	mov    %eax,(%esp)
     698:	89 5c 24 04          	mov    %ebx,0x4(%esp)
     69c:	c7 44 24 08 50 00 00 	movl   $0x50,0x8(%esp)
     6a3:	00 
     6a4:	e8 b3 fe ff ff       	call   55c <init_8259A+0xcc>
		"#MC Machine Check",
		"#XF SIMD Floating Point Exception"
	};
		
		/* 屏幕前五行清零 */
		disp_pos = 0;
     6a9:	c7 05 00 28 00 00 00 	movl   $0x0,0x2800
     6b0:	00 00 00 
		for(i = 0; i < 5 * 80; i++)
     6b3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
     6ba:	81 7d dc 90 01 00 00 	cmpl   $0x190,-0x24(%ebp)
     6c1:	0f 8d 1e 00 00 00    	jge    6e5 <exception_handler+0x95>
     6c7:	8d 05 51 14 00 00    	lea    0x1451,%eax
			disp_str(" ");
     6cd:	89 04 24             	mov    %eax,(%esp)
     6d0:	e8 9c fd ff ff       	call   471 <memcpy.1+0x2>
		"#XF SIMD Floating Point Exception"
	};
		
		/* 屏幕前五行清零 */
		disp_pos = 0;
		for(i = 0; i < 5 * 80; i++)
     6d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
     6d8:	05 01 00 00 00       	add    $0x1,%eax
     6dd:	89 45 dc             	mov    %eax,-0x24(%ebp)
     6e0:	e9 d5 ff ff ff       	jmp    6ba <exception_handler+0x6a>
     6e5:	8d 05 53 14 00 00    	lea    0x1453,%eax
			disp_str(" ");
		disp_pos = 0;
     6eb:	c7 05 00 28 00 00 00 	movl   $0x0,0x2800
     6f2:	00 00 00 
		
		disp_color_str("Exception! --> ", text_color);
     6f5:	89 04 24             	mov    %eax,(%esp)
     6f8:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
     6fc:	89 44 24 04          	mov    %eax,0x4(%esp)
     700:	e8 12 fe ff ff       	call   517 <init_8259A+0x87>
		disp_color_str(err_msg[vec_no], text_color);
     705:	8b 45 f0             	mov    -0x10(%ebp),%eax
     708:	8b 44 85 88          	mov    -0x78(%ebp,%eax,4),%eax
     70c:	89 04 24             	mov    %eax,(%esp)
     70f:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
     713:	89 44 24 04          	mov    %eax,0x4(%esp)
     717:	e8 fb fd ff ff       	call   517 <init_8259A+0x87>
     71c:	8d 05 63 14 00 00    	lea    0x1463,%eax
		disp_color_str("\n\n", text_color);
     722:	89 04 24             	mov    %eax,(%esp)
     725:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
     729:	89 44 24 04          	mov    %eax,0x4(%esp)
     72d:	e8 e5 fd ff ff       	call   517 <init_8259A+0x87>
     732:	8d 05 66 14 00 00    	lea    0x1466,%eax
		disp_color_str("EFLAGS:", text_color);
     738:	89 04 24             	mov    %eax,(%esp)
     73b:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
     73f:	89 44 24 04          	mov    %eax,0x4(%esp)
     743:	e8 cf fd ff ff       	call   517 <init_8259A+0x87>
		disp_int(eflags);
     748:	8b 45 e0             	mov    -0x20(%ebp),%eax
     74b:	89 04 24             	mov    %eax,(%esp)
     74e:	e8 79 0b 00 00       	call   12cc <.L.str6+0x7>
     753:	8d 05 6e 14 00 00    	lea    0x146e,%eax
		disp_color_str("CS:", text_color);
     759:	89 04 24             	mov    %eax,(%esp)
     75c:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
     760:	89 44 24 04          	mov    %eax,0x4(%esp)
     764:	e8 ae fd ff ff       	call   517 <init_8259A+0x87>
		disp_int(cs);
     769:	8b 45 e4             	mov    -0x1c(%ebp),%eax
     76c:	89 04 24             	mov    %eax,(%esp)
     76f:	e8 58 0b 00 00       	call   12cc <.L.str6+0x7>
     774:	8d 05 72 14 00 00    	lea    0x1472,%eax
		disp_color_str("EIP:",text_color);
     77a:	89 04 24             	mov    %eax,(%esp)
     77d:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
     781:	89 44 24 04          	mov    %eax,0x4(%esp)
     785:	e8 8d fd ff ff       	call   517 <init_8259A+0x87>
		disp_int(eip);
     78a:	8b 45 e8             	mov    -0x18(%ebp),%eax
     78d:	89 04 24             	mov    %eax,(%esp)
     790:	e8 37 0b 00 00       	call   12cc <.L.str6+0x7>
		
		if(err_code != 0xFFFFFFFF)
     795:	81 7d ec ff ff ff ff 	cmpl   $0xffffffff,-0x14(%ebp)
     79c:	0f 84 21 00 00 00    	je     7c3 <exception_handler+0x173>
     7a2:	8d 05 77 14 00 00    	lea    0x1477,%eax
		{
			disp_color_str("ERROR CODE:", text_color);
     7a8:	89 04 24             	mov    %eax,(%esp)
     7ab:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
     7af:	89 44 24 04          	mov    %eax,0x4(%esp)
     7b3:	e8 5f fd ff ff       	call   517 <init_8259A+0x87>
			disp_int(err_code);
     7b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
     7bb:	89 04 24             	mov    %eax,(%esp)
     7be:	e8 09 0b 00 00       	call   12cc <.L.str6+0x7>
		}
}
     7c3:	81 c4 8c 00 00 00    	add    $0x8c,%esp
     7c9:	5e                   	pop    %esi
     7ca:	5f                   	pop    %edi
     7cb:	5b                   	pop    %ebx
     7cc:	5d                   	pop    %ebp
     7cd:	c3                   	ret    
     7ce:	66 90                	xchg   %ax,%ax

000007d0 <init_prot>:
	p_gate->attr = desc_type | (privilege << 5);
	p_gate->dcount = 0;
}

PUBLIC void init_prot()
{
     7d0:	55                   	push   %ebp
     7d1:	89 e5                	mov    %esp,%ebp
	init_8259A();
     7d3:	56                   	push   %esi
     7d4:	81 ec 94 01 00 00    	sub    $0x194,%esp
     7da:	e8 ad fd ff ff       	call   58c <init_8259A+0xfc>
     7df:	31 c0                	xor    %eax,%eax
     7e1:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     7e6:	8d 15 56 01 00 00    	lea    0x156,%edx
	
	/* 全部初始化为中断门 */
	init_idt_desc(INT_VECTOR_DIVIDE, DA_386IGate, divide_error, PRIVILEGE_KRNL);
     7ec:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
     7f3:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     7fa:	00 
     7fb:	89 54 24 08          	mov    %edx,0x8(%esp)
     7ff:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     806:	00 
     807:	89 45 f8             	mov    %eax,-0x8(%ebp)
     80a:	89 4d f4             	mov    %ecx,-0xc(%ebp)
     80d:	e8 ee 07 00 00       	call   1000 <init_idt_desc>
     812:	b8 01 00 00 00       	mov    $0x1,%eax
     817:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     81c:	8d 15 5c 01 00 00    	lea    0x15c,%edx
     822:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_DEBUG, DA_386IGate, single_step_exception, PRIVILEGE_KRNL);
     824:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
     82b:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     832:	00 
     833:	89 54 24 08          	mov    %edx,0x8(%esp)
     837:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     83e:	00 
     83f:	89 45 f0             	mov    %eax,-0x10(%ebp)
     842:	89 4d ec             	mov    %ecx,-0x14(%ebp)
     845:	89 75 e8             	mov    %esi,-0x18(%ebp)
     848:	e8 b3 07 00 00       	call   1000 <init_idt_desc>
     84d:	b8 02 00 00 00       	mov    $0x2,%eax
     852:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     857:	8d 15 62 01 00 00    	lea    0x162,%edx
     85d:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_NMI, DA_386IGate, nmi, PRIVILEGE_KRNL);
     85f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
     866:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     86d:	00 
     86e:	89 54 24 08          	mov    %edx,0x8(%esp)
     872:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     879:	00 
     87a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     87d:	89 4d e0             	mov    %ecx,-0x20(%ebp)
     880:	89 75 dc             	mov    %esi,-0x24(%ebp)
     883:	e8 78 07 00 00       	call   1000 <init_idt_desc>
     888:	b8 03 00 00 00       	mov    $0x3,%eax
     88d:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     892:	8d 15 68 01 00 00    	lea    0x168,%edx
     898:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_BREAKPOINT, DA_386IGate, breakpoint_exception, PRIVILEGE_KRNL);
     89a:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
     8a1:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     8a8:	00 
     8a9:	89 54 24 08          	mov    %edx,0x8(%esp)
     8ad:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     8b4:	00 
     8b5:	89 45 d8             	mov    %eax,-0x28(%ebp)
     8b8:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     8bb:	89 75 d0             	mov    %esi,-0x30(%ebp)
     8be:	e8 3d 07 00 00       	call   1000 <init_idt_desc>
     8c3:	b8 04 00 00 00       	mov    $0x4,%eax
     8c8:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     8cd:	8d 15 6e 01 00 00    	lea    0x16e,%edx
     8d3:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_OVERFLOW, DA_386IGate, overflow, PRIVILEGE_KRNL);
     8d5:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
     8dc:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     8e3:	00 
     8e4:	89 54 24 08          	mov    %edx,0x8(%esp)
     8e8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     8ef:	00 
     8f0:	89 45 cc             	mov    %eax,-0x34(%ebp)
     8f3:	89 4d c8             	mov    %ecx,-0x38(%ebp)
     8f6:	89 75 c4             	mov    %esi,-0x3c(%ebp)
     8f9:	e8 02 07 00 00       	call   1000 <init_idt_desc>
     8fe:	b8 05 00 00 00       	mov    $0x5,%eax
     903:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     908:	8d 15 74 01 00 00    	lea    0x174,%edx
     90e:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_BOUNDS, DA_386IGate, bounds_check, PRIVILEGE_KRNL);
     910:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
     917:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     91e:	00 
     91f:	89 54 24 08          	mov    %edx,0x8(%esp)
     923:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     92a:	00 
     92b:	89 45 c0             	mov    %eax,-0x40(%ebp)
     92e:	89 4d bc             	mov    %ecx,-0x44(%ebp)
     931:	89 75 b8             	mov    %esi,-0x48(%ebp)
     934:	e8 c7 06 00 00       	call   1000 <init_idt_desc>
     939:	b8 06 00 00 00       	mov    $0x6,%eax
     93e:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     943:	8d 15 7a 01 00 00    	lea    0x17a,%edx
     949:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_INVAL_OP, DA_386IGate, invalid_opcode, PRIVILEGE_KRNL);
     94b:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
     952:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     959:	00 
     95a:	89 54 24 08          	mov    %edx,0x8(%esp)
     95e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     965:	00 
     966:	89 45 b4             	mov    %eax,-0x4c(%ebp)
     969:	89 4d b0             	mov    %ecx,-0x50(%ebp)
     96c:	89 75 ac             	mov    %esi,-0x54(%ebp)
     96f:	e8 8c 06 00 00       	call   1000 <init_idt_desc>
     974:	b8 07 00 00 00       	mov    $0x7,%eax
     979:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     97e:	8d 15 80 01 00 00    	lea    0x180,%edx
     984:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_COPROC_NOT, DA_386IGate, copr_not_available, PRIVILEGE_KRNL);
     986:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
     98d:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     994:	00 
     995:	89 54 24 08          	mov    %edx,0x8(%esp)
     999:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     9a0:	00 
     9a1:	89 45 a8             	mov    %eax,-0x58(%ebp)
     9a4:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
     9a7:	89 75 a0             	mov    %esi,-0x60(%ebp)
     9aa:	e8 51 06 00 00       	call   1000 <init_idt_desc>
     9af:	b8 08 00 00 00       	mov    $0x8,%eax
     9b4:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     9b9:	8d 15 86 01 00 00    	lea    0x186,%edx
     9bf:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_DOUBLE_FAULT, DA_386IGate, double_fault, PRIVILEGE_KRNL);
     9c1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
     9c8:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     9cf:	00 
     9d0:	89 54 24 08          	mov    %edx,0x8(%esp)
     9d4:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     9db:	00 
     9dc:	89 45 9c             	mov    %eax,-0x64(%ebp)
     9df:	89 4d 98             	mov    %ecx,-0x68(%ebp)
     9e2:	89 75 94             	mov    %esi,-0x6c(%ebp)
     9e5:	e8 16 06 00 00       	call   1000 <init_idt_desc>
     9ea:	b8 09 00 00 00       	mov    $0x9,%eax
     9ef:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     9f4:	8d 15 8a 01 00 00    	lea    0x18a,%edx
     9fa:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_COPROC_SEG, DA_386IGate, copr_seg_overrun, PRIVILEGE_KRNL);
     9fc:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
     a03:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     a0a:	00 
     a0b:	89 54 24 08          	mov    %edx,0x8(%esp)
     a0f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     a16:	00 
     a17:	89 45 90             	mov    %eax,-0x70(%ebp)
     a1a:	89 4d 8c             	mov    %ecx,-0x74(%ebp)
     a1d:	89 75 88             	mov    %esi,-0x78(%ebp)
     a20:	e8 db 05 00 00       	call   1000 <init_idt_desc>
     a25:	b8 0a 00 00 00       	mov    $0xa,%eax
     a2a:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     a2f:	8d 15 90 01 00 00    	lea    0x190,%edx
     a35:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_INVAL_TSS, DA_386IGate, invalid_tss, PRIVILEGE_KRNL);
     a37:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
     a3e:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     a45:	00 
     a46:	89 54 24 08          	mov    %edx,0x8(%esp)
     a4a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     a51:	00 
     a52:	89 45 84             	mov    %eax,-0x7c(%ebp)
     a55:	89 4d 80             	mov    %ecx,-0x80(%ebp)
     a58:	89 b5 7c ff ff ff    	mov    %esi,-0x84(%ebp)
     a5e:	e8 9d 05 00 00       	call   1000 <init_idt_desc>
     a63:	b8 0b 00 00 00       	mov    $0xb,%eax
     a68:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     a6d:	8d 15 94 01 00 00    	lea    0x194,%edx
     a73:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_SEG_NOT, DA_386IGate, segment_not_present, PRIVILEGE_KRNL);
     a75:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
     a7c:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     a83:	00 
     a84:	89 54 24 08          	mov    %edx,0x8(%esp)
     a88:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     a8f:	00 
     a90:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
     a96:	89 8d 74 ff ff ff    	mov    %ecx,-0x8c(%ebp)
     a9c:	89 b5 70 ff ff ff    	mov    %esi,-0x90(%ebp)
     aa2:	e8 59 05 00 00       	call   1000 <init_idt_desc>
     aa7:	b8 0c 00 00 00       	mov    $0xc,%eax
     aac:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     ab1:	8d 15 98 01 00 00    	lea    0x198,%edx
     ab7:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_STACK_FAULT, DA_386IGate, stack_exception, PRIVILEGE_KRNL);
     ab9:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
     ac0:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     ac7:	00 
     ac8:	89 54 24 08          	mov    %edx,0x8(%esp)
     acc:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     ad3:	00 
     ad4:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
     ada:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%ebp)
     ae0:	89 b5 64 ff ff ff    	mov    %esi,-0x9c(%ebp)
     ae6:	e8 15 05 00 00       	call   1000 <init_idt_desc>
     aeb:	b8 0d 00 00 00       	mov    $0xd,%eax
     af0:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     af5:	8d 15 9c 01 00 00    	lea    0x19c,%edx
     afb:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_PROTECTION, DA_386IGate, general_protection, PRIVILEGE_KRNL);
     afd:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
     b04:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     b0b:	00 
     b0c:	89 54 24 08          	mov    %edx,0x8(%esp)
     b10:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     b17:	00 
     b18:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
     b1e:	89 8d 5c ff ff ff    	mov    %ecx,-0xa4(%ebp)
     b24:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%ebp)
     b2a:	e8 d1 04 00 00       	call   1000 <init_idt_desc>
     b2f:	b8 0e 00 00 00       	mov    $0xe,%eax
     b34:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     b39:	8d 15 a0 01 00 00    	lea    0x1a0,%edx
     b3f:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_PAGE_FAULT, DA_386IGate, page_fault, PRIVILEGE_KRNL);
     b41:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
     b48:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     b4f:	00 
     b50:	89 54 24 08          	mov    %edx,0x8(%esp)
     b54:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     b5b:	00 
     b5c:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
     b62:	89 8d 50 ff ff ff    	mov    %ecx,-0xb0(%ebp)
     b68:	89 b5 4c ff ff ff    	mov    %esi,-0xb4(%ebp)
     b6e:	e8 8d 04 00 00       	call   1000 <init_idt_desc>
     b73:	b8 10 00 00 00       	mov    $0x10,%eax
     b78:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     b7d:	8d 15 a4 01 00 00    	lea    0x1a4,%edx
     b83:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_COPROC_ERR, DA_386IGate, copr_error, PRIVILEGE_KRNL);
     b85:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
     b8c:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     b93:	00 
     b94:	89 54 24 08          	mov    %edx,0x8(%esp)
     b98:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     b9f:	00 
     ba0:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
     ba6:	89 8d 44 ff ff ff    	mov    %ecx,-0xbc(%ebp)
     bac:	89 b5 40 ff ff ff    	mov    %esi,-0xc0(%ebp)
     bb2:	e8 49 04 00 00       	call   1000 <init_idt_desc>
     bb7:	b8 20 00 00 00       	mov    $0x20,%eax
     bbc:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     bc1:	8d 15 b3 01 00 00    	lea    0x1b3,%edx
     bc7:	31 f6                	xor    %esi,%esi

	/* 初始化8259A的处理程序 */
	init_idt_desc(INT_VECTOR_IRQ0 + 0, DA_386IGate, hwint_00, PRIVILEGE_KRNL);
     bc9:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
     bd0:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     bd7:	00 
     bd8:	89 54 24 08          	mov    %edx,0x8(%esp)
     bdc:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     be3:	00 
     be4:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
     bea:	89 8d 38 ff ff ff    	mov    %ecx,-0xc8(%ebp)
     bf0:	89 b5 34 ff ff ff    	mov    %esi,-0xcc(%ebp)
     bf6:	e8 05 04 00 00       	call   1000 <init_idt_desc>
     bfb:	b8 21 00 00 00       	mov    $0x21,%eax
     c00:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     c05:	8d 15 be 01 00 00    	lea    0x1be,%edx
     c0b:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_IRQ0 + 1, DA_386IGate, hwint_01, PRIVILEGE_KRNL);
     c0d:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
     c14:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     c1b:	00 
     c1c:	89 54 24 08          	mov    %edx,0x8(%esp)
     c20:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     c27:	00 
     c28:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
     c2e:	89 8d 2c ff ff ff    	mov    %ecx,-0xd4(%ebp)
     c34:	89 b5 28 ff ff ff    	mov    %esi,-0xd8(%ebp)
     c3a:	e8 c1 03 00 00       	call   1000 <init_idt_desc>
     c3f:	b8 22 00 00 00       	mov    $0x22,%eax
     c44:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     c49:	8d 15 c9 01 00 00    	lea    0x1c9,%edx
     c4f:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_IRQ0 + 2, DA_386IGate, hwint_02, PRIVILEGE_KRNL);
     c51:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
     c58:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     c5f:	00 
     c60:	89 54 24 08          	mov    %edx,0x8(%esp)
     c64:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     c6b:	00 
     c6c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
     c72:	89 8d 20 ff ff ff    	mov    %ecx,-0xe0(%ebp)
     c78:	89 b5 1c ff ff ff    	mov    %esi,-0xe4(%ebp)
     c7e:	e8 7d 03 00 00       	call   1000 <init_idt_desc>
     c83:	b8 23 00 00 00       	mov    $0x23,%eax
     c88:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     c8d:	8d 15 d4 01 00 00    	lea    0x1d4,%edx
     c93:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_IRQ0 + 3, DA_386IGate, hwint_03, PRIVILEGE_KRNL);
     c95:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
     c9c:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     ca3:	00 
     ca4:	89 54 24 08          	mov    %edx,0x8(%esp)
     ca8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     caf:	00 
     cb0:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
     cb6:	89 8d 14 ff ff ff    	mov    %ecx,-0xec(%ebp)
     cbc:	89 b5 10 ff ff ff    	mov    %esi,-0xf0(%ebp)
     cc2:	e8 39 03 00 00       	call   1000 <init_idt_desc>
     cc7:	b8 24 00 00 00       	mov    $0x24,%eax
     ccc:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     cd1:	8d 15 df 01 00 00    	lea    0x1df,%edx
     cd7:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_IRQ0 + 4, DA_386IGate, hwint_04, PRIVILEGE_KRNL);
     cd9:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
     ce0:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     ce7:	00 
     ce8:	89 54 24 08          	mov    %edx,0x8(%esp)
     cec:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     cf3:	00 
     cf4:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
     cfa:	89 8d 08 ff ff ff    	mov    %ecx,-0xf8(%ebp)
     d00:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%ebp)
     d06:	e8 f5 02 00 00       	call   1000 <init_idt_desc>
     d0b:	b8 25 00 00 00       	mov    $0x25,%eax
     d10:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     d15:	8d 15 ea 01 00 00    	lea    0x1ea,%edx
     d1b:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_IRQ0 + 5, DA_386IGate, hwint_05, PRIVILEGE_KRNL);
     d1d:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
     d24:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     d2b:	00 
     d2c:	89 54 24 08          	mov    %edx,0x8(%esp)
     d30:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     d37:	00 
     d38:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
     d3e:	89 8d fc fe ff ff    	mov    %ecx,-0x104(%ebp)
     d44:	89 b5 f8 fe ff ff    	mov    %esi,-0x108(%ebp)
     d4a:	e8 b1 02 00 00       	call   1000 <init_idt_desc>
     d4f:	b8 26 00 00 00       	mov    $0x26,%eax
     d54:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     d59:	8d 15 f5 01 00 00    	lea    0x1f5,%edx
     d5f:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_IRQ0 + 6, DA_386IGate, hwint_06, PRIVILEGE_KRNL);
     d61:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
     d68:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     d6f:	00 
     d70:	89 54 24 08          	mov    %edx,0x8(%esp)
     d74:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     d7b:	00 
     d7c:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
     d82:	89 8d f0 fe ff ff    	mov    %ecx,-0x110(%ebp)
     d88:	89 b5 ec fe ff ff    	mov    %esi,-0x114(%ebp)
     d8e:	e8 6d 02 00 00       	call   1000 <init_idt_desc>
     d93:	b8 27 00 00 00       	mov    $0x27,%eax
     d98:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     d9d:	8d 15 00 02 00 00    	lea    0x200,%edx
     da3:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_IRQ0 + 7, DA_386IGate, hwint_07, PRIVILEGE_KRNL);
     da5:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
     dac:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     db3:	00 
     db4:	89 54 24 08          	mov    %edx,0x8(%esp)
     db8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     dbf:	00 
     dc0:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
     dc6:	89 8d e4 fe ff ff    	mov    %ecx,-0x11c(%ebp)
     dcc:	89 b5 e0 fe ff ff    	mov    %esi,-0x120(%ebp)
     dd2:	e8 29 02 00 00       	call   1000 <init_idt_desc>
     dd7:	b8 28 00 00 00       	mov    $0x28,%eax
     ddc:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     de1:	8d 15 0b 02 00 00    	lea    0x20b,%edx
     de7:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_IRQ8 + 0, DA_386IGate, hwint_08, PRIVILEGE_KRNL);
     de9:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
     df0:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     df7:	00 
     df8:	89 54 24 08          	mov    %edx,0x8(%esp)
     dfc:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     e03:	00 
     e04:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
     e0a:	89 8d d8 fe ff ff    	mov    %ecx,-0x128(%ebp)
     e10:	89 b5 d4 fe ff ff    	mov    %esi,-0x12c(%ebp)
     e16:	e8 e5 01 00 00       	call   1000 <init_idt_desc>
     e1b:	b8 29 00 00 00       	mov    $0x29,%eax
     e20:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     e25:	8d 15 16 02 00 00    	lea    0x216,%edx
     e2b:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_IRQ8 + 1, DA_386IGate, hwint_09, PRIVILEGE_KRNL);
     e2d:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
     e34:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     e3b:	00 
     e3c:	89 54 24 08          	mov    %edx,0x8(%esp)
     e40:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     e47:	00 
     e48:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
     e4e:	89 8d cc fe ff ff    	mov    %ecx,-0x134(%ebp)
     e54:	89 b5 c8 fe ff ff    	mov    %esi,-0x138(%ebp)
     e5a:	e8 a1 01 00 00       	call   1000 <init_idt_desc>
     e5f:	b8 2a 00 00 00       	mov    $0x2a,%eax
     e64:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     e69:	8d 15 21 02 00 00    	lea    0x221,%edx
     e6f:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_IRQ8 + 2, DA_386IGate, hwint_10, PRIVILEGE_KRNL);
     e71:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
     e78:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     e7f:	00 
     e80:	89 54 24 08          	mov    %edx,0x8(%esp)
     e84:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     e8b:	00 
     e8c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
     e92:	89 8d c0 fe ff ff    	mov    %ecx,-0x140(%ebp)
     e98:	89 b5 bc fe ff ff    	mov    %esi,-0x144(%ebp)
     e9e:	e8 5d 01 00 00       	call   1000 <init_idt_desc>
     ea3:	b8 2b 00 00 00       	mov    $0x2b,%eax
     ea8:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     ead:	8d 15 2c 02 00 00    	lea    0x22c,%edx
     eb3:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_IRQ8 + 3, DA_386IGate, hwint_11, PRIVILEGE_KRNL);
     eb5:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
     ebc:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     ec3:	00 
     ec4:	89 54 24 08          	mov    %edx,0x8(%esp)
     ec8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     ecf:	00 
     ed0:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
     ed6:	89 8d b4 fe ff ff    	mov    %ecx,-0x14c(%ebp)
     edc:	89 b5 b0 fe ff ff    	mov    %esi,-0x150(%ebp)
     ee2:	e8 19 01 00 00       	call   1000 <init_idt_desc>
     ee7:	b8 2c 00 00 00       	mov    $0x2c,%eax
     eec:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     ef1:	8d 15 37 02 00 00    	lea    0x237,%edx
     ef7:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_IRQ8 + 4, DA_386IGate, hwint_12, PRIVILEGE_KRNL);
     ef9:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
     f00:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     f07:	00 
     f08:	89 54 24 08          	mov    %edx,0x8(%esp)
     f0c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     f13:	00 
     f14:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
     f1a:	89 8d a8 fe ff ff    	mov    %ecx,-0x158(%ebp)
     f20:	89 b5 a4 fe ff ff    	mov    %esi,-0x15c(%ebp)
     f26:	e8 d5 00 00 00       	call   1000 <init_idt_desc>
     f2b:	b8 2d 00 00 00       	mov    $0x2d,%eax
     f30:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     f35:	8d 15 42 02 00 00    	lea    0x242,%edx
     f3b:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_IRQ8 + 5, DA_386IGate, hwint_13, PRIVILEGE_KRNL);
     f3d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
     f44:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     f4b:	00 
     f4c:	89 54 24 08          	mov    %edx,0x8(%esp)
     f50:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     f57:	00 
     f58:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
     f5e:	89 8d 9c fe ff ff    	mov    %ecx,-0x164(%ebp)
     f64:	89 b5 98 fe ff ff    	mov    %esi,-0x168(%ebp)
     f6a:	e8 91 00 00 00       	call   1000 <init_idt_desc>
     f6f:	b8 2e 00 00 00       	mov    $0x2e,%eax
     f74:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     f79:	8d 15 4d 02 00 00    	lea    0x24d,%edx
     f7f:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_IRQ8 + 6, DA_386IGate, hwint_14, PRIVILEGE_KRNL);
     f81:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
     f88:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     f8f:	00 
     f90:	89 54 24 08          	mov    %edx,0x8(%esp)
     f94:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     f9b:	00 
     f9c:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
     fa2:	89 8d 90 fe ff ff    	mov    %ecx,-0x170(%ebp)
     fa8:	89 b5 8c fe ff ff    	mov    %esi,-0x174(%ebp)
     fae:	e8 4d 00 00 00       	call   1000 <init_idt_desc>
     fb3:	b8 2f 00 00 00       	mov    $0x2f,%eax
     fb8:	b9 8e 00 00 00       	mov    $0x8e,%ecx
     fbd:	8d 15 58 02 00 00    	lea    0x258,%edx
     fc3:	31 f6                	xor    %esi,%esi
	init_idt_desc(INT_VECTOR_IRQ8 + 7, DA_386IGate, hwint_15, PRIVILEGE_KRNL);
     fc5:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
     fcc:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
     fd3:	00 
     fd4:	89 54 24 08          	mov    %edx,0x8(%esp)
     fd8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
     fdf:	00 
     fe0:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
     fe6:	89 8d 84 fe ff ff    	mov    %ecx,-0x17c(%ebp)
     fec:	89 b5 80 fe ff ff    	mov    %esi,-0x180(%ebp)
     ff2:	e8 09 00 00 00       	call   1000 <init_idt_desc>
}
     ff7:	81 c4 94 01 00 00    	add    $0x194,%esp
     ffd:	5e                   	pop    %esi
     ffe:	5d                   	pop    %ebp
     fff:	c3                   	ret    

00001000 <init_idt_desc>:
}

typedef void (*int_hander)();

PRIVATE void init_idt_desc(u8 vector, u8 desc_type, int_hander hander, u8 privilege)
{
    1000:	55                   	push   %ebp
    1001:	89 e5                	mov    %esp,%ebp
    1003:	57                   	push   %edi
    1004:	56                   	push   %esi
    1005:	83 ec 14             	sub    $0x14,%esp
    1008:	8a 45 14             	mov    0x14(%ebp),%al
    100b:	8b 4d 10             	mov    0x10(%ebp),%ecx
    100e:	8a 55 0c             	mov    0xc(%ebp),%dl
    1011:	8a 65 08             	mov    0x8(%ebp),%ah
    1014:	8d 35 0a 2c 00 00    	lea    0x2c0a,%esi
    101a:	88 65 f7             	mov    %ah,-0x9(%ebp)
    101d:	88 55 f6             	mov    %dl,-0xa(%ebp)
    1020:	89 4d f0             	mov    %ecx,-0x10(%ebp)
    1023:	88 45 ef             	mov    %al,-0x11(%ebp)
	GATE *p_gate = &idt[vector];
    1026:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
    102a:	c1 e1 03             	shl    $0x3,%ecx
    102d:	01 ce                	add    %ecx,%esi
    102f:	89 75 e8             	mov    %esi,-0x18(%ebp)
	u32 offset = (u32)hander;
    1032:	8b 4d f0             	mov    -0x10(%ebp),%ecx
    1035:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
	p_gate->offset_low = offset & 0xFFFF;
    1038:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    103b:	81 e1 ff ff 00 00    	and    $0xffff,%ecx
    1041:	66 89 cf             	mov    %cx,%di
    1044:	8b 4d e8             	mov    -0x18(%ebp),%ecx
    1047:	66 89 39             	mov    %di,(%ecx)
	p_gate->offset_high = (offset >> 16) & 0xFFFF;
    104a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
    104d:	c1 e9 10             	shr    $0x10,%ecx
    1050:	81 e1 ff ff 00 00    	and    $0xffff,%ecx
    1056:	66 89 cf             	mov    %cx,%di
    1059:	8b 4d e8             	mov    -0x18(%ebp),%ecx
    105c:	66 89 79 06          	mov    %di,0x6(%ecx)
	p_gate->selector = SELECTOR_CS_KERNEL;
    1060:	8b 4d e8             	mov    -0x18(%ebp),%ecx
    1063:	66 c7 41 02 08 00    	movw   $0x8,0x2(%ecx)
	p_gate->attr = desc_type | (privilege << 5);
    1069:	0f b6 4d f6          	movzbl -0xa(%ebp),%ecx
    106d:	0f b6 75 ef          	movzbl -0x11(%ebp),%esi
    1071:	c1 e6 05             	shl    $0x5,%esi
    1074:	09 f1                	or     %esi,%ecx
    1076:	88 c8                	mov    %cl,%al
    1078:	8b 4d e8             	mov    -0x18(%ebp),%ecx
    107b:	88 41 05             	mov    %al,0x5(%ecx)
	p_gate->dcount = 0;
    107e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
    1081:	c6 41 04 00          	movb   $0x0,0x4(%ecx)
}
    1085:	83 c4 14             	add    $0x14,%esp
    1088:	5e                   	pop    %esi
    1089:	5f                   	pop    %edi
    108a:	5d                   	pop    %ebp
    108b:	c3                   	ret    
    108c:	00 00                	add    %al,(%eax)
	...

00001090 <itoa>:
#include<tinux.h>
PUBLIC char* itoa(char *str, u32 num)
{
    1090:	55                   	push   %ebp
    1091:	89 e5                	mov    %esp,%ebp
    1093:	83 ec 18             	sub    $0x18,%esp
    1096:	8b 45 0c             	mov    0xc(%ebp),%eax
    1099:	8b 4d 08             	mov    0x8(%ebp),%ecx
    109c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
    109f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	char *p = str;
    10a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
    10a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	char ch;
	int i;
	int flag = 1;
    10a8:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
	
	*p++='0';
    10af:	8b 45 f4             	mov    -0xc(%ebp),%eax
    10b2:	89 c1                	mov    %eax,%ecx
    10b4:	81 c1 01 00 00 00    	add    $0x1,%ecx
    10ba:	89 4d f4             	mov    %ecx,-0xc(%ebp)
    10bd:	c6 00 30             	movb   $0x30,(%eax)
	*p++='x';
    10c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
    10c3:	89 c1                	mov    %eax,%ecx
    10c5:	81 c1 01 00 00 00    	add    $0x1,%ecx
    10cb:	89 4d f4             	mov    %ecx,-0xc(%ebp)
    10ce:	c6 00 78             	movb   $0x78,(%eax)
	
	if(num == 0)
    10d1:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
    10d8:	0f 85 16 00 00 00    	jne    10f4 <itoa+0x64>
		*p++='0';
    10de:	8b 45 f4             	mov    -0xc(%ebp),%eax
    10e1:	89 c1                	mov    %eax,%ecx
    10e3:	81 c1 01 00 00 00    	add    $0x1,%ecx
    10e9:	89 4d f4             	mov    %ecx,-0xc(%ebp)
    10ec:	c6 00 30             	movb   $0x30,(%eax)
    10ef:	e9 bf 00 00 00       	jmp    11b3 <itoa+0x123>
	else
	{
		for(i = 28; i >=0; i-=4)
    10f4:	c7 45 ec 1c 00 00 00 	movl   $0x1c,-0x14(%ebp)
    10fb:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
    1102:	0f 8c a6 00 00 00    	jl     11ae <itoa+0x11e>
		{
			ch = (num >> i) & 0xF;
    1108:	8b 45 f8             	mov    -0x8(%ebp),%eax
    110b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
    110e:	d3 e8                	shr    %cl,%eax
    1110:	25 0f 00 00 00       	and    $0xf,%eax
    1115:	88 c1                	mov    %al,%cl
    1117:	88 4d f3             	mov    %cl,-0xd(%ebp)
			//跳过开头的0
			if(ch == 0 && flag)
    111a:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
    111e:	3d 00 00 00 00       	cmp    $0x0,%eax
    1123:	0f 85 12 00 00 00    	jne    113b <itoa+0xab>
    1129:	81 7d e8 00 00 00 00 	cmpl   $0x0,-0x18(%ebp)
    1130:	0f 84 05 00 00 00    	je     113b <itoa+0xab>
				continue;
    1136:	e9 63 00 00 00       	jmp    119e <itoa+0x10e>
			flag = 0;
    113b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
			if(ch <= 9)
    1142:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
    1146:	3d 09 00 00 00       	cmp    $0x9,%eax
    114b:	0f 8f 13 00 00 00    	jg     1164 <itoa+0xd4>
			{
				ch += '0';
    1151:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
    1155:	05 30 00 00 00       	add    $0x30,%eax
    115a:	88 c1                	mov    %al,%cl
    115c:	88 4d f3             	mov    %cl,-0xd(%ebp)
			}
    115f:	e9 27 00 00 00       	jmp    118b <itoa+0xfb>
			else if(ch >= 10 )
    1164:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
    1168:	3d 0a 00 00 00       	cmp    $0xa,%eax
    116d:	0f 8c 13 00 00 00    	jl     1186 <itoa+0xf6>
			{
				ch = ch - 10 + 'A';
    1173:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
    1177:	2d 0a 00 00 00       	sub    $0xa,%eax
    117c:	05 41 00 00 00       	add    $0x41,%eax
    1181:	88 c1                	mov    %al,%cl
    1183:	88 4d f3             	mov    %cl,-0xd(%ebp)
    1186:	e9 00 00 00 00       	jmp    118b <itoa+0xfb>
			}
			*p++=ch;
    118b:	8a 45 f3             	mov    -0xd(%ebp),%al
    118e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
    1191:	89 ca                	mov    %ecx,%edx
    1193:	81 c2 01 00 00 00    	add    $0x1,%edx
    1199:	89 55 f4             	mov    %edx,-0xc(%ebp)
    119c:	88 01                	mov    %al,(%ecx)
	
	if(num == 0)
		*p++='0';
	else
	{
		for(i = 28; i >=0; i-=4)
    119e:	8b 45 ec             	mov    -0x14(%ebp),%eax
    11a1:	2d 04 00 00 00       	sub    $0x4,%eax
    11a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    11a9:	e9 4d ff ff ff       	jmp    10fb <itoa+0x6b>
    11ae:	e9 00 00 00 00       	jmp    11b3 <itoa+0x123>
				ch = ch - 10 + 'A';
			}
			*p++=ch;
		}
	}
	*p = 0;
    11b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
    11b6:	c6 00 00             	movb   $0x0,(%eax)
	return str;
    11b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
    11bc:	83 c4 18             	add    $0x18,%esp
    11bf:	5d                   	pop    %ebp
    11c0:	c3                   	ret    
    11c1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
    11c8:	0f 1f 84 00 00 00 00 
    11cf:	00 

000011d0 <disp_int>:
}

PUBLIC void disp_int(u32 input)
{
    11d0:	55                   	push   %ebp
    11d1:	89 e5                	mov    %esp,%ebp
    11d3:	83 ec 28             	sub    $0x28,%esp
    11d6:	8b 45 08             	mov    0x8(%ebp),%eax
    11d9:	8d 4d ec             	lea    -0x14(%ebp),%ecx
    11dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
	char output[16];
	itoa(output, input);
    11df:	8b 45 fc             	mov    -0x4(%ebp),%eax
    11e2:	89 0c 24             	mov    %ecx,(%esp)
    11e5:	89 44 24 04          	mov    %eax,0x4(%esp)
    11e9:	e8 a2 fe ff ff       	call   1090 <itoa>
    11ee:	8d 4d ec             	lea    -0x14(%ebp),%ecx
	disp_str(output);
    11f1:	89 0c 24             	mov    %ecx,(%esp)
    11f4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    11f7:	e8 75 f2 ff ff       	call   471 <memcpy.1+0x2>
}
    11fc:	83 c4 28             	add    $0x28,%esp
    11ff:	5d                   	pop    %ebp
    1200:	c3                   	ret    
